{"version":3,"sources":["tools/players.ts","tools/arrays.ts","tools/getResult.tsx","components/Result.tsx","components/NextMove.tsx","tools/styles.ts","components/Cell.tsx","components/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PLAYER","getArr","length","func","Array","from","map","_","i","PLAYERS","player1","name","symbol","player2","checkLine","line","firstVal","every","cell","Result","props","result","onRefresh","undefined","css","marginTop","fontSize","onClick","marginLeft","NextMove","marginBottom","player","btnNormalize","padding","backgroundColor","border","outline","cursor","Cell","display","justifyContent","alignItems","Board","board","handleClick","boardNode","forEach","row","column","j","push","gridTemplateColumns","gridTemplateRows","flatten","initState","currentPlayer","App","useImmer","state","setState","lines","columnLine","diagonal1","diagonal2","getResult","width","margin","draftSt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffc401b1.chunk.js","sourcesContent":["export enum PLAYER {\r\n\tplayer1,\r\n\tplayer2,\r\n}\r\n\r\nexport const PLAYERS = {\r\n\t[PLAYER.player1 as PLAYER]: {\r\n\t\tname: \"Player 1\",\r\n\t\tsymbol: \"X\",\r\n\t},\r\n\t[PLAYER.player2 as PLAYER]: {\r\n\t\tname: \"Player 2\",\r\n\t\tsymbol: \"O\",\r\n\t},\r\n}\r\n","export const getArr = <T extends any>(length: number, func: (i: number) => T): T[] =>\r\n\tArray.from(new Array(length)).map((_, i) => func(i))\r\n","import { PLAYER } from \"./players\"\r\nimport { BoardState, CellVal } from \"./types/board\"\r\nimport { DR } from \"./types/readOnly\"\r\n\r\nconst checkLine = (line: DR<Array<CellVal>>) => {\r\n\tconst firstVal = line[0]\r\n\tif (line.every((cell) => cell === firstVal)) {\r\n\t\treturn firstVal\r\n\t}\r\n}\r\n\r\nexport const getResult = (board: DR<BoardState>): PLAYER | undefined | \"tie\" => {\r\n\tlet lines = [...board]\r\n\r\n\tfor (let i = 0; i < 3; i++) {\r\n\t\tconst columnLine = []\r\n\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\tcolumnLine.push(board[j][i])\r\n\t\t}\r\n\t\tlines.push(columnLine)\r\n\t}\r\n\r\n\tconst diagonal1 = [board[0][0], board[1][1], board[2][2]]\r\n\tconst diagonal2 = [board[0][2], board[1][1], board[2][0]]\r\n\tlines.push(diagonal1, diagonal2)\r\n\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst result = checkLine(lines[i])\r\n\t\tif (result !== undefined) {\r\n\t\t\treturn result\r\n\t\t}\r\n\t}\r\n\r\n\tconst allTouched = board.every((row) => row.every((column) => column !== undefined))\r\n\tif (allTouched) {\r\n\t\treturn \"tie\"\r\n\t}\r\n}\r\n","/** @jsxImportSource @emotion/react */\r\nimport { FC } from \"react\"\r\nimport { getResult } from \"../tools/getResult\"\r\nimport { PLAYERS } from \"../tools/players\"\r\n\r\ninterface Props {\r\n\tresult: ReturnType<typeof getResult>\r\n\tonRefresh: () => unknown\r\n}\r\n\r\nconst Result: FC<Props> = (props) => {\r\n\tconst { result, onRefresh } = props\r\n\r\n\tif (result === undefined) {\r\n\t\treturn null\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tcss={{\r\n\t\t\t\tmarginTop: 20,\r\n\t\t\t\tfontSize: 20,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{result === \"tie\" ? (\r\n\t\t\t\t\"It's Tie\"\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\tThe Winner is <strong>{PLAYERS[result].name}</strong>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t<button\r\n\t\t\t\tonClick={onRefresh}\r\n\t\t\t\tcss={{\r\n\t\t\t\t\tmarginLeft: 20,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tRefresh\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Result\r\n","/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\"\r\nimport { FC } from \"react\"\r\nimport { PLAYER, PLAYERS } from \"../tools/players\"\r\nimport { DR } from \"../tools/types/readOnly\"\r\n\r\ninterface Props {\r\n\tplayer: PLAYER\r\n}\r\n\r\nconst NextMove: FC<DR<Props>> = (props) => (\r\n\t<div\r\n\t\tcss={{\r\n\t\t\tmarginBottom: 20,\r\n\t\t\tmarginTop: 10,\r\n\t\t}}\r\n\t>\r\n\t\tnext Move by <strong>{PLAYERS[props.player].name}</strong>\r\n\t</div>\r\n)\r\n\r\nexport default NextMove\r\n","import { css } from \"@emotion/react\"\r\n\r\nconst baseNormalizer = css({\r\n\tpadding: \"unset\",\r\n\tbackgroundColor: \"unset\",\r\n\tborder: \"unset\",\r\n\t\":focus\": {\r\n\t\toutline: \"none\",\r\n\t},\r\n})\r\n\r\nexport const btnNormalize = [\r\n\tbaseNormalizer,\r\n\tcss({\r\n\t\tcursor: \"pointer\",\r\n\t}),\r\n]\r\n","/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\"\r\nimport { FC } from \"react\"\r\nimport { PLAYER, PLAYERS } from \"../tools/players\"\r\nimport { btnNormalize } from \"../tools/styles\"\r\nimport { DR } from \"../tools/types/readOnly\"\r\n\r\ninterface Props {\r\n\tplayer?: PLAYER\r\n\tonClick: () => unknown\r\n}\r\n\r\nconst Cell: FC<DR<Props>> = (props) => {\r\n\tconst { player, onClick } = props\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\tonClick={onClick}\r\n\t\t\tcss={[\r\n\t\t\t\tbtnNormalize,\r\n\t\t\t\t{\r\n\t\t\t\t\tborder: \"1px solid black \",\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t\tfontSize: 50,\r\n\t\t\t\t},\r\n\t\t\t]}\r\n\t\t>\r\n\t\t\t{player !== undefined && PLAYERS[player].symbol}\r\n\t\t</button>\r\n\t)\r\n}\r\n\r\nexport default Cell\r\n","/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\"\r\nimport { flatten } from \"ramda\"\r\nimport { FC } from \"react\"\r\nimport { BoardState } from \"../tools/types/board\"\r\nimport { DR } from \"../tools/types/readOnly\"\r\nimport Cell from \"./Cell\"\r\n\r\ninterface Props {\r\n\tboard: BoardState\r\n\thandleClick: (row: number, column: number) => unknown\r\n}\r\n\r\nconst Board: FC<DR<Props>> = (props) => {\r\n\tconst { board, handleClick } = props\r\n\r\n\tlet boardNode: React.ReactNode[] = []\r\n\tboard.forEach((row, i) => {\r\n\t\trow.forEach((column, j) => boardNode.push())\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tcss={{\r\n\t\t\t\tdisplay: \"grid\",\r\n\t\t\t\tgridTemplateColumns: \"repeat(3, 200px)\",\r\n\t\t\t\tgridTemplateRows: \"repeat(3, 200px)\",\r\n\t\t\t\tjustifyContent: \"start\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{flatten(\r\n\t\t\t\tboard.map((row, i) =>\r\n\t\t\t\t\trow.map((cell, j) => (\r\n\t\t\t\t\t\t<Cell\r\n\t\t\t\t\t\t\tplayer={board[i][j]}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\thandleClick(i, j)\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)),\r\n\t\t\t\t),\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Board\r\n","/** @jsxImportSource @emotion/react */\nimport React, { FC } from \"react\"\nimport { useImmer } from \"use-immer\"\nimport { getArr } from \"./tools/arrays\"\nimport { PLAYER } from \"./tools/players\"\nimport { BoardState } from \"./tools/types/board\"\nimport { getResult } from \"./tools/getResult\"\nimport Result from \"./components/Result\"\nimport NextMove from \"./components/NextMove\"\nimport Board from \"./components/Board\"\n\ninterface State {\n\tboard: BoardState\n\tcurrentPlayer: PLAYER\n}\n\nconst initState: State = {\n\tboard: getArr(3, () => getArr(3, () => undefined)),\n\tcurrentPlayer: PLAYER.player1,\n}\n\nconst App: FC = () => {\n\tconst [state, setState] = useImmer(initState)\n\n\tconst result = getResult(state.board)\n\n\treturn (\n\t\t<div\n\t\t\tcss={{\n\t\t\t\twidth: 800,\n\t\t\t\tmargin: \"auto\",\n\t\t\t}}\n\t\t>\n\t\t\t<NextMove player={state.currentPlayer} />\n\n\t\t\t<Board\n\t\t\t\tboard={state.board}\n\t\t\t\thandleClick={(row, column) => {\n\t\t\t\t\tif (result !== undefined || state.board[row][column] !== undefined) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tsetState((draftSt) => {\n\t\t\t\t\t\tdraftSt.board[row][column] = draftSt.currentPlayer\n\t\t\t\t\t\tdraftSt.currentPlayer =\n\t\t\t\t\t\t\tdraftSt.currentPlayer === PLAYER.player1 ? PLAYER.player2 : PLAYER.player1\n\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<Result onRefresh={() => setState(() => initState)} result={result} />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}