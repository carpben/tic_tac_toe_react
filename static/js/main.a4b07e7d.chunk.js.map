{"version":3,"sources":["tools/players.ts","tools/arrays.ts","tools/getResult.tsx","components/Result.tsx","components/NextMove.tsx","tools/styles.ts","components/Cell.tsx","components/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PLAYER","getArr","length","func","Array","from","map","_","i","PLAYERS","player1","name","symbol","player2","checkLine","line","firstVal","every","cell","Result","props","result","onRefresh","undefined","css","marginTop","fontSize","onClick","marginLeft","NextMove","marginBottom","player","btnNormalize","padding","backgroundColor","border","outline","cursor","Cell","display","justifyContent","alignItems","Board","board","handleClick","boardNode","forEach","row","column","j","push","gridTemplateColumns","gridTemplateRows","flatten","initState","currentPlayer","App","useImmer","state","setState","lines","console","log","columnLine","diagonal1","diagonal2","getResult","width","margin","draftSt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4b07e7d.chunk.js","sourcesContent":["\r\nexport enum PLAYER {\r\n  player1,\r\n  player2\r\n}\r\n\r\nexport const PLAYERS = {\r\n  [PLAYER.player1 as PLAYER] : {\r\n    name: \"Player 1\",\r\n    symbol: \"X\"\r\n  },\r\n  [PLAYER.player2 as PLAYER]: {\r\n    name: \"Player 2\",\r\n    symbol: \"O\"\r\n  },\r\n} \r\n","\r\n\r\nexport const getArr = <T extends any>(length: number, func: (i: number) => T): T[] => Array.from(new Array(length)).map((_, i) => func(i));\r\n","import { PLAYER } from \"./players\";\r\nimport { BoardState, CellVal } from \"./types/board\";\r\nimport { DR } from \"./types/readOnly\";\r\n\r\n\r\nconst checkLine = (line: DR<Array<CellVal>>) => {\r\n  const firstVal = line[0]\r\n  if (line.every(cell => cell===firstVal)){\r\n    return firstVal\r\n  }\r\n}\r\n\r\nexport const getResult = (board: DR<BoardState>): PLAYER | undefined | \"tie\" => {\r\n  let lines = [...board] \r\n\r\n  console.log(lines)\r\n\r\n  for (let i=0; i<3 ; i++) {\r\n    const columnLine = [] \r\n    for (let j=0; j<3 ; j++){\r\n      columnLine.push(board[j][i])\r\n    }\r\n    console.log(lines)\r\n    lines.push(columnLine)\r\n    console.log(lines)\r\n  }\r\n\r\n  const diagonal1 = [board[0][0], board[1][1], board[2][2]]\r\n  const diagonal2 = [board[0][2], board[1][1], board[2][0]]\r\n  lines.push(diagonal1, diagonal2)\r\n\r\n  for (let i=0 ; i<lines.length ; i++) {\r\n    const result = checkLine(lines[i])\r\n    if (result!==undefined) {\r\n      return result\r\n    }\r\n  }\r\n\r\n  const allTouched = board.every(row => row.every( column => column!==undefined))\r\n  if (allTouched){\r\n    return \"tie\"\r\n  }\r\n\r\n};\r\n","/** @jsxImportSource @emotion/react */\r\nimport { FC } from \"react\";\r\nimport { getResult } from \"../tools/getResult\";\r\nimport { PLAYERS } from \"../tools/players\";\r\n\r\ninterface Props {\r\n  result: ReturnType<typeof getResult>;\r\n  onRefresh: () => unknown;\r\n}\r\n\r\nconst Result: FC<Props> = (props) => {\r\n  const { result, onRefresh } = props;\r\n\r\n  if (result === undefined) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        marginTop: 20,\r\n        fontSize: 20,\r\n      }}\r\n    >\r\n      {result === \"tie\" ? (\r\n        \"It's Tie\"\r\n      ) : (\r\n        <>\r\n          The Winner is <strong>{PLAYERS[result].name}</strong>\r\n        </>\r\n      )}\r\n      <button\r\n        onClick={onRefresh}\r\n        css={{\r\n          marginLeft: 20,\r\n        }}\r\n      >\r\n        Refresh\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport { FC } from \"react\";\r\nimport { PLAYER, PLAYERS } from \"../tools/players\";\r\n\r\ninterface Props {\r\n    player: PLAYER\r\n}\r\n\r\nconst NextMove: FC<Props> = (props)=>(\r\n    <div\r\n    css={{\r\n      marginBottom: 20,\r\n      marginTop: 10,\r\n    }}\r\n  >\r\n    next Move by <strong>{PLAYERS[props.player].name}</strong>\r\n  </div>\r\n)\r\n\r\nexport  default NextMove","import { css } from \"@emotion/react\";\r\n\r\nconst baseNormalizer = css({\r\n    padding: \"unset\",\r\n    backgroundColor: \"unset\",\r\n    border: \"unset\",\r\n    \":focus\" :  {\r\n        outline: \"none\",\r\n    }\r\n})\r\n\r\nexport const btnNormalize = [\r\n    baseNormalizer,\r\n    css({\r\n        cursor: \"pointer\"\r\n    })\r\n]","/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport { FC } from \"react\";\r\nimport { PLAYER, PLAYERS } from \"../tools/players\";\r\nimport { btnNormalize } from \"../tools/styles\";\r\n\r\ninterface Props {\r\n  player?: PLAYER;\r\n  onClick: () => unknown;\r\n}\r\n\r\nconst Cell: FC<Props> = (props) => {\r\n  const { player, onClick } = props;\r\n\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      css={[\r\n        btnNormalize,\r\n        {\r\n          border: \"1px solid black \",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          fontSize: 50\r\n        },\r\n      ]}\r\n    >\r\n     { player!==undefined &&  PLAYERS[player].symbol}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport { flatten } from \"ramda\";\r\nimport { FC } from \"react\";\r\nimport { BoardState } from \"../tools/types/board\";\r\nimport Cell from \"./Cell\";\r\n\r\n\r\ninterface Props {\r\n  board: BoardState;\r\n  handleClick: (row: number, column: number ) => unknown \r\n}\r\n\r\nconst Board: FC<Props> = (props) => {\r\n  const { board, handleClick } = props;\r\n\r\n  let boardNode: React.ReactNode[] = [];\r\n  board.forEach((row, i) => {\r\n    row.forEach((column, j) =>\r\n    boardNode.push(\r\n\r\n      )\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div\r\n    css={{\r\n      display: \"grid\",\r\n      gridTemplateColumns: \"repeat(3, 200px)\",\r\n      gridTemplateRows: \"repeat(3, 200px)\",\r\n      justifyContent: \"start\",\r\n    }}\r\n  >\r\n    {/* {boardNode} */}\r\n    {\r\n        flatten(board.map((row, i) => row.map( (cell, j) => (\r\n            <Cell\r\n            player={board[i][j]}\r\n            onClick={() => {\r\n             handleClick(i, j)\r\n            }}\r\n          />\r\n        ))))\r\n    }\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Board;","/** @jsxImportSource @emotion/react */\nimport React, {  } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { getArr } from \"./tools/arrays\";\nimport { PLAYER } from \"./tools/players\";\nimport { BoardState } from \"./tools/types/board\";\nimport { getResult } from \"./tools/getResult\";\nimport Result from \"./components/Result\";\nimport NextMove from \"./components/NextMove\";\nimport Board from \"./components/Board\";\n\ninterface State {\n  board: BoardState;\n  currentPlayer: PLAYER;\n}\n\nconst initState: State = {\n  board: getArr(3, () => getArr(3, () => undefined)),\n  currentPlayer: PLAYER.player1,\n};\n\nfunction App() {\n  const [state, setState] = useImmer(initState);\n\n  const result = getResult(state.board);\n\n  return (\n    <div\n      css={{\n        width: 800,\n        margin: \"auto\",\n      }}\n    >\n\n      <NextMove player={state.currentPlayer} />\n\n      <Board\n        board={state.board}\n        handleClick={(row, column) => {\n          if (result !== undefined) {\n            return;\n          }\n          setState((draftSt) => {\n            draftSt.board[row][column] = draftSt.currentPlayer;\n            draftSt.currentPlayer =\n              draftSt.currentPlayer === PLAYER.player1\n                ? PLAYER.player2\n                : PLAYER.player1;\n          });\n        }}\n      />\n\n      <Result\n        onRefresh={() => setState(() => initState)}\n        result={result}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}